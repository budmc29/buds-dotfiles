/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const stream_1 = require("stream");
const util_1 = require("util");
const messageWriter_1 = require("../messageWriter");
const messageReader_1 = require("../messageReader");
let TestWritable = function () {
    function TestWritable() {
        stream_1.Writable.call(this);
        this.data = '';
    }
    util_1.inherits(TestWritable, stream_1.Writable);
    TestWritable.prototype._write = function (chunk, _encoding, done) {
        this.data += chunk.toString();
        done();
    };
    return TestWritable;
}();
describe('Messages', () => {
    let data = 'Content-Length: 43\r\n\r\n{"jsonrpc":"2.0","id":1,"method":"example"}';
    it('Writing', () => {
        let writable = new TestWritable();
        let writer = new messageWriter_1.StreamMessageWriter(writable, 'ascii');
        let request = {
            jsonrpc: '2.0',
            id: 1,
            method: 'example'
        };
        writer.write(request);
        writable.end();
        assert.equal(writable.data, data);
    });
    it('Reading', (done) => {
        let readable = new stream_1.Readable();
        new messageReader_1.StreamMessageReader(readable).listen((message) => {
            assert.equal(message.id, 1);
            assert.equal(message.method, 'example');
            done();
        });
        readable.push(data);
        readable.push(null);
    });
    it('Read partial', (done) => {
        let readable = new stream_1.Readable();
        let reader = new messageReader_1.StreamMessageReader(readable);
        reader.partialMessageTimeout = 100;
        let partOne = 'Content-Length: 43\r\n\r\n';
        let partTwo = '{"jsonrpc":"2.0","id":1,"method":"example"}';
        reader.listen((message) => {
            assert.equal(message.id, 1);
            assert.equal(message.method, 'example');
            setTimeout(() => {
                done();
            }, 200);
        });
        reader.onPartialMessage((_info) => {
            setTimeout(() => {
                readable.push(partTwo);
                readable.push(null);
            }, 20);
        });
        readable.push(partOne);
    });
});
